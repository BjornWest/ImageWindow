import com.sun.security.jgss.GSSUtil;

import java.lang.reflect.Array;
import java.util.*;


/**
 *   PixelArrayExercise: Playing around with pixels
 *   @author Gabriel Skoglund
 *   @version 2020-10-08
 */

public class CoordsSave{
    public static void main(String[] args) throws InterruptedException {
        ImageWindow image = new ImageWindow();
        Pixel[][] pixels = image.getPixels();
        Rotation rotation = new Rotation();
        Generate generate = new Generate();
        Image.interval = 1000;

        double circles = 600;


        for (int z = 0; z <1; z++) {
            double k = 500;
          //  circles+=2;
            System.out.println("circles: " + circles);
            double[][] both;
            double maxRadius;
            both = generate.radAng((int) circles);
            int finalRadius = 2;
            double radius = 1;
            int vectorThicc = 10;
            double vectorRadius = 1.5;
            double[][][] allCoords = new double[(int) k][(int)circles][2];
            double[][] coords = new double[(int) k][2];
            double[][][][] vectorCoords = new double[(int)k][(int)circles][vectorThicc][2];
            for (int i = 0; i < k; i++) {
                double[] rads = both[0];
                double[] roteet = new double[(int) circles];
                double[] axis = {image.WIDTH / 2, image.HEIGHT / 2};
                double[] roToot;
                for (int m = 0; m < circles; m++) {
                    double nRotate;
                    if (m % 2 == 1) {
                        nRotate = (m ) / 2;
                    } else {
                        nRotate = -m / 2;
                    }
                    roteet[m] = both[1][m] + i * nRotate * Math.PI * 2 / k;
                    //   System.out.println(i+"  "+m+"  "+roteet[m]);
                    //   System.out.println(i+"  "+m+"  "+both[1][m]);
                }
                allCoords[i] = rotation.multiAxis(rads, axis, (int) circles, roteet);
                coords[i] = allCoords[i][(int)circles];
                for (int j = 0; j < circles; j++) {
                    double xPointDiff = allCoords[i][j+1][0]-allCoords[i][j][0];
                    double yPointDiff = allCoords[i][j+1][1]-allCoords[i][j][1];
                   // System.out.println(Math.sqrt(Math.pow(xPointDiff,2)+Math.pow(yPointDiff,2)));
                    for (int l = 0; l < vectorThicc; l++) {
                        vectorCoords[i][j][l][0] = allCoords[i][j][0]+xPointDiff*l/vectorThicc;
                        vectorCoords[i][j][l][1] =  allCoords[i][j][1]+yPointDiff*l/vectorThicc;

                    }

                }
            }
            PathToCords loser = new PathToCords(100);
          //    coords = loser.getCords("M1475 2907 c-22 -8 -63 -26 -92 -40 -29 -15 -65 -27 -80 -27 -38 0 -126 -53 -156 -92 -13 -18 -31 -59 -40 -91 -9 -35 -31 -76 -52 -102 -52 -64 -85 -141 -85 -200 0 -33 18 -107 54 -220 30 -93 53 -171 51 -174 -3 -2 -14 4 -25 14 -15 14 -23 16 -32 7 -9 -9 -7 -26 5 -69 10 -32 19 -75 21 -96 4 -43 9 -52 29 -44 11 4 13 16 6 57 -4 28 -11 60 -14 70 -4 11 -4 20 -1 20 16 0 67 -69 76 -103 6 -21 13 -44 16 -51 3 -8 -9 -23 -29 -35 -54 -33 -69 -82 -45 -149 18 -48 0 -58 -119 -65 -204 -12 -318 -54 -480 -176 -127 -96 -165 -133 -239 -225 -42 -54 -144 -240 -144 -265 0 -5 -9 -31 -21 -57 -24 -57 -49 -181 -49 -245 0 -112 32 -206 96 -285 43 -52 181 -118 344 -166 l115 -33 237 2 c214 1 243 3 307 23 61 20 76 21 115 11 25 -6 90 -11 146 -11 96 0 102 -1 123 -26 21 -24 31 -26 125 -31 l102 -6 38 40 c20 22 50 43 66 47 25 6 55 31 94 80 11 13 35 16 137 16 l123 0 77 -46 c162 -95 308 -84 485 35 33 23 57 31 88 31 46 0 60 23 20 33 l-22 6 21 23 c35 39 73 125 73 167 0 48 -32 188 -57 251 -51 126 -108 216 -192 299 l-84 84 12 34 c8 22 10 52 6 81 -6 39 -17 56 -71 112 -48 50 -62 71 -58 87 7 24 -15 70 -45 97 -12 11 -21 25 -21 33 0 23 -30 76 -62 110 l-30 31 17 46 c12 32 16 60 12 90 -5 34 -3 47 10 58 28 23 53 91 53 146 0 63 -26 121 -70 152 -26 18 -30 28 -30 66 0 58 -12 80 -59 103 -28 15 -40 28 -44 51 -4 16 -24 68 -46 113 -67 140 -201 264 -315 291 -16 4 -37 17 -47 30 -10 12 -46 38 -81 56 -54 29 -75 34 -143 37 -48 2 -96 -3 -120 -10z m210 -37 c22 -10 49 -25 60 -34 19 -14 15 -15 -61 -16 -51 0 -95 6 -117 15 -20 8 -50 15 -67 15 -16 0 -30 4 -30 10 0 8 24 16 95 33 28 7 73 -2 120 -23z m-169 -59 c-3 -5 -25 -12 -48 -15 -24 -4 -69 -17 -100 -30 -32 -13 -58 -20 -58 -15 0 4 15 22 33 38 30 29 37 31 105 31 40 0 71 -4 68 -9z m-246 -59 c-12 -21 -44 -53 -71 -71 -27 -17 -49 -36 -49 -41 0 -6 -5 -10 -11 -10 -15 0 -3 47 23 82 19 27 118 92 126 83 2 -2 -6 -21 -18 -43z m606 1 c137 -57 234 -156 279 -284 8 -23 19 -47 24 -53 5 -6 13 -27 18 -46 6 -23 18 -40 36 -48 32 -16 69 -61 65 -81 -2 -12 -26 -15 -128 -15 -124 -1 -126 -1 -197 -38 l-71 -37 -39 30 c-117 94 -277 96 -405 7 -51 -35 -65 -52 -81 -93 -29 -77 -30 -96 -7 -157 17 -45 31 -64 73 -95 48 -35 83 -48 185 -68 41 -8 155 12 202 35 19 10 44 27 54 39 17 19 30 21 131 21 100 0 116 -2 146 -23 59 -39 53 -95 -13 -122 -34 -14 -89 -20 -258 -25 -227 -8 -239 -11 -337 -59 -74 -36 -120 -80 -153 -147 -33 -66 -34 -198 -2 -259 28 -54 89 -117 139 -144 39 -20 156 -41 233 -41 43 0 90 -4 104 -9 21 -9 23 -14 17 -38 -7 -27 -8 -28 -82 -25 -41 2 -98 -2 -127 -7 l-52 -10 -91 54 c-161 97 -218 156 -286 298 -34 71 -41 111 -22 123 6 4 8 20 4 40 -5 31 -4 34 19 34 35 0 56 10 56 27 0 12 -8 14 -36 9 -22 -5 -56 -1 -89 9 -43 12 -58 22 -71 46 -23 46 -12 74 41 99 l46 22 44 -23 c33 -18 47 -21 56 -12 11 11 3 17 -93 77 -31 18 -37 50 -12 64 13 7 16 22 12 76 -2 36 -1 66 2 66 3 0 25 -27 49 -59 44 -61 66 -78 76 -60 8 13 -134 201 -149 196 -6 -2 -13 -38 -16 -88 -5 -83 -5 -84 -22 -59 -19 28 -112 293 -134 384 -30 120 17 219 154 323 45 35 87 63 92 63 5 0 12 -9 15 -20 3 -11 13 -20 21 -20 11 0 13 8 9 33 -6 31 -4 33 42 56 26 13 84 34 128 47 69 20 97 23 205 20 112 -3 132 -6 196 -33z m-128 -552 c109 -34 172 -105 172 -196 0 -105 -89 -183 -220 -193 -126 -9 -256 46 -293 124 -21 43 -21 41 3 47 24 6 27 39 5 57 -29 24 -13 58 57 119 35 30 121 60 175 61 22 0 68 -8 101 -19z m572 -50 c59 -49 82 -94 77 -149 -7 -62 -45 -114 -109 -144 -51 -25 -54 -25 -73 -8 -45 40 -82 50 -178 50 -51 0 -96 2 -99 5 -10 11 23 89 48 111 26 25 23 54 -7 54 -16 0 -49 34 -49 51 0 4 24 20 53 35 61 33 125 43 222 37 62 -5 75 -9 115 -42z m14 -345 c5 -20 -17 -96 -28 -96 -2 0 -20 7 -40 15 -33 14 -37 19 -34 47 2 26 9 34 38 44 50 18 57 17 64 -10z m-79 -115 c52 -32 123 -110 136 -149 6 -20 25 -51 41 -68 20 -21 29 -40 26 -55 -4 -28 -33 -37 -56 -16 -9 8 -28 17 -42 20 -14 3 -45 11 -70 17 -55 14 -140 7 -211 -19 -30 -10 -70 -21 -89 -24 -20 -3 -67 -20 -105 -38 -44 -20 -87 -33 -117 -34 -105 -4 -210 -88 -165 -132 16 -16 22 -16 101 5 100 26 119 27 152 6 18 -13 38 -15 79 -11 32 3 55 2 55 -4 0 -5 -16 -33 -35 -62 l-36 -54 -82 4 c-107 5 -250 29 -284 47 -29 15 -83 68 -121 120 -18 24 -22 42 -22 111 0 69 4 90 28 136 32 63 85 107 169 140 49 18 88 23 238 30 208 8 288 17 330 35 40 17 45 17 80 -5z m-1084 -171 c17 0 9 -22 -15 -41 -14 -11 -34 -45 -46 -77 -19 -49 -21 -69 -16 -147 16 -228 43 -316 137 -441 24 -33 36 -58 33 -71 -4 -14 12 -35 60 -81 36 -34 66 -66 66 -71 0 -5 -14 -14 -32 -20 -29 -10 -34 -9 -63 23 -17 19 -42 37 -56 40 -13 2 -62 12 -109 20 -166 32 -174 35 -215 95 -21 30 -48 77 -60 106 l-23 52 21 19 c46 39 104 81 145 104 23 13 41 29 39 34 -2 6 -23 20 -48 31 -108 48 -164 81 -167 97 -5 26 60 120 130 189 84 82 178 151 195 144 8 -3 19 -5 24 -5z m-161 -43 c-8 -8 -43 -38 -78 -67 -60 -51 -63 -53 -89 -39 -18 10 -60 14 -135 14 -59 -1 -108 1 -108 3 0 2 28 16 63 31 72 33 229 66 322 70 33 1 37 -1 25 -12z m178 -54 c-11 -28 -7 -40 37 -133 44 -91 59 -111 140 -189 60 -56 116 -100 163 -124 l72 -38 -33 -39 c-18 -21 -53 -75 -77 -119 -25 -44 -50 -81 -56 -81 -22 0 -130 79 -160 117 -47 60 -94 138 -94 157 0 9 -7 27 -15 40 -18 27 -35 157 -35 272 0 87 17 146 47 163 24 13 25 10 11 -26z m1131 -26 c30 -9 67 -28 83 -44 25 -24 31 -26 49 -15 17 11 25 8 58 -18 70 -57 101 -143 71 -200 -7 -14 -31 -47 -54 -75 -22 -27 -55 -77 -71 -110 -25 -49 -39 -65 -80 -87 -82 -45 -174 -69 -271 -69 l-87 0 -46 52 c-55 62 -64 88 -50 147 11 52 24 78 53 112 12 14 29 41 38 61 15 33 15 39 1 58 -13 20 -21 21 -67 16 -46 -6 -56 -4 -81 17 -42 36 -28 59 58 96 89 39 175 44 237 12 43 -22 80 -26 80 -10 0 6 -23 22 -52 35 -50 23 -51 24 -28 34 31 13 88 8 159 -12z m-1532 -49 c29 -7 53 -18 53 -25 0 -6 -13 -33 -29 -60 -49 -80 -48 -85 11 -125 29 -19 77 -43 106 -52 28 -10 52 -21 51 -24 0 -4 -35 -30 -77 -58 -42 -28 -84 -63 -92 -77 -14 -25 -12 -31 33 -122 46 -94 47 -95 23 -95 -16 0 -27 7 -31 20 -14 43 -184 109 -254 98 -42 -6 -21 -23 45 -35 78 -14 154 -42 154 -56 0 -5 -10 -7 -22 -3 -90 24 -180 18 -222 -15 -39 -31 -23 -38 36 -18 57 20 153 25 163 9 3 -5 22 -10 41 -10 19 0 67 -12 107 -26 39 -14 88 -26 107 -25 20 1 55 -5 79 -14 24 -8 56 -15 72 -15 42 0 42 -13 -2 -56 -75 -72 -110 -168 -110 -302 0 -48 4 -100 10 -115 6 -16 9 -33 5 -38 -9 -14 -88 -10 -110 6 -27 21 -61 18 -96 -6 -27 -20 -38 -21 -121 -15 -122 8 -172 17 -297 56 -124 38 -159 55 -228 110 -74 58 -98 100 -117 205 -22 118 -18 155 36 320 37 113 74 186 139 274 83 112 131 163 207 219 51 37 79 50 141 63 99 21 125 22 189 7z m1013 -72 c0 -17 -5 -21 -42 -30 -25 -6 -28 -4 -28 19 0 22 4 25 35 25 24 0 35 -5 35 -14z m-100 -24 c0 -13 -12 -22 -35 -29 -44 -14 -53 -1 -19 26 33 26 54 27 54 3z m948 -247 c118 -106 199 -259 247 -465 23 -99 13 -138 -61 -224 -58 -68 -113 -108 -206 -151 -46 -21 -73 -26 -135 -26 -92 -1 -141 15 -238 76 -68 43 -215 183 -249 238 -18 29 -15 32 29 39 13 2 21 12 23 30 4 32 -31 60 -63 52 -24 -6 -35 15 -35 69 0 25 2 27 28 20 15 -5 66 -7 114 -5 137 4 272 55 415 157 10 7 17 5 24 -8 6 -10 23 -33 38 -50 16 -18 52 -67 80 -109 29 -43 59 -78 67 -78 19 0 18 6 -7 47 -12 19 -19 37 -15 40 8 9 36 -17 62 -59 30 -47 49 -50 40 -5 -7 38 -81 113 -122 123 -15 4 -39 21 -53 38 -13 17 -53 59 -89 94 l-64 63 22 37 c30 50 73 100 86 101 7 1 35 -19 62 -44z m-781 -67 c5 -7 20 -37 32 -66 27 -65 22 -96 -22 -147 l-33 -38 -83 2 c-50 1 -95 8 -111 16 -31 16 -100 92 -100 109 0 6 22 35 48 64 41 46 54 54 97 61 79 13 161 13 172 -1z m613 -98 c0 -40 -249 -144 -365 -151 -48 -4 -143 10 -150 21 -2 4 4 15 15 25 15 13 29 16 58 12 98 -16 329 39 394 93 30 25 48 25 48 0z m-528 -82 c-9 -18 -18 -35 -19 -37 -2 -2 -6 -2 -9 1 -7 8 24 68 36 68 5 0 1 -15 -8 -32z m-374 -46 c39 -38 36 -57 -10 -67 -18 -4 -56 -14 -84 -22 l-51 -16 -36 39 c-19 21 -34 41 -31 43 2 2 19 -4 38 -14 18 -10 41 -15 50 -12 9 4 28 32 43 62 24 49 29 54 38 38 5 -10 25 -33 43 -51z m-238 3 c7 -8 10 -18 6 -22 -7 -7 -56 36 -56 49 0 11 33 -6 50 -27z m585 -81 c2 -38 11 -86 19 -106 18 -43 21 -78 5 -78 -15 0 -45 76 -59 153 -11 61 -11 70 5 87 10 11 20 18 22 16 2 -2 6 -35 8 -72z m-240 23 c13 -3 9 -5 -12 -6 -24 -1 -33 3 -33 15 0 12 3 14 13 6 6 -5 21 -12 32 -15z m169 -45 c5 -18 6 -35 2 -39 -3 -3 -26 8 -50 25 -24 18 -55 36 -68 42 -18 7 -8 9 42 7 63 -2 64 -2 74 -35z m-131 -3 c47 -13 170 -130 192 -182 16 -39 20 -107 7 -107 -5 0 -21 14 -38 31 -34 37 -141 109 -161 109 -7 0 -13 -7 -13 -15 0 -8 3 -15 8 -15 11 0 110 -75 150 -113 25 -24 32 -39 32 -70 0 -49 -13 -73 -50 -92 -28 -15 -31 -14 -36 2 -15 48 -34 68 -98 110 -44 28 -72 41 -78 35 -12 -12 8 -31 73 -72 79 -51 89 -107 26 -154 -32 -24 -110 -27 -162 -6 l-30 12 24 9 c19 8 22 12 12 22 -8 8 -61 12 -174 12 -143 0 -166 2 -194 20 l-33 19 0 97 c0 88 3 103 31 159 40 82 72 109 126 110 24 0 61 10 86 23 24 13 53 27 63 30 11 3 37 13 59 21 47 18 125 20 178 5z m-478 -13 c19 -8 35 -20 35 -27 0 -8 -6 -6 -18 4 -10 10 -28 17 -40 17 -12 0 -22 5 -22 10 0 13 4 13 45 -4z m15 -42 c0 -3 -15 -23 -32 -44 -18 -21 -44 -67 -58 -102 -21 -53 -25 -79 -25 -170 0 -117 -7 -132 -51 -103 -70 46 -18 352 70 406 29 17 96 27 96 13z m770 -21 c0 -5 -11 -13 -25 -20 -14 -6 -25 -10 -25 -8 0 2 -3 10 -6 19 -5 13 1 16 25 16 17 0 31 -3 31 -7z m5 -173 l48 -49 -41 -40 c-36 -36 -46 -40 -74 -34 -18 3 -35 8 -37 10 -3 2 6 23 18 48 12 25 22 58 21 73 -4 57 2 56 65 -8z m95 -99 c14 -27 15 -27 -32 -23 l-42 4 23 19 c29 24 38 24 51 0z\n");
            ArrayList<Integer> pixelEdit = new ArrayList<>();
            for (int i = 0; i < 10; i++) {

                for (int j = 0; j < k; j++) {
                    for (int x = (int)(coords[j][0]-finalRadius); x <  (int)(coords[j][0]+finalRadius); x++) {
                        for (int y =(int)(coords[j][1]-finalRadius); y < (int)(coords[j][1]+finalRadius); y++) {
                            if ((Math.pow(coords[j][0] - x, 2) + Math.pow(coords[j][1] - y, 2) < Math.pow(finalRadius, 2)  && ImageWindow.WIDTH > x && x > 0 && y > 0 && y < ImageWindow.HEIGHT)) {
                                  pixels[x][y].setRGB(0, 0, 255);
                                if (i > -1) {
                                    pixelEdit.add(x);
                                    pixelEdit.add(y);

                                }
                            }
                        }
                    }
                    ArrayList<Integer> pixelDelete = new ArrayList<Integer>();

                    for (int m = 0; m < circles; m++) {
                        for (int x = (int) (vectorCoords[j][m][0][0]-both[0][m])-1; x < (int) (vectorCoords[j][m][0][0]+both[0][m]+1); x++) {
                            for (int y = (int) (vectorCoords[j][m][0][1]-both[0][m])-1; y < (int) (vectorCoords[j][m][0][1]+both[0][m]+1); y++) {
                                if (Math.sqrt(Math.pow(vectorCoords[j][m][0][0]-x,2)+Math.pow(vectorCoords[j][m][0][1]-y,2))>both[0][m]-1 && Math.sqrt(Math.pow(vectorCoords[j][m][0][0]-x,2)+Math.pow(vectorCoords[j][m][0][1]-y,2)) <both[0][m] &&ImageWindow.WIDTH > x && x > 0 && y > 0 && y < ImageWindow.HEIGHT ){
                                    pixels[x][y].setRGB(0, 50, pixels[x][y].getB());
                                    if (i>=0){
                                        pixelDelete.add(x);
                                        pixelDelete.add(y);
                                    }
                                }

                            }
                        }
                        for (int l = 0; l < vectorThicc; l++) {
                            for (int x = (int)(vectorCoords[j][m][l][0] - 1); x < (int)(vectorCoords[j][m][l][0] +1); x++) {
                                for (int y = (int)(vectorCoords[j][m][l][1] - 1); y <(int)(vectorCoords[j][m][l][1] + 1) ; y++) {
                                    if (Math.pow(vectorCoords[j][m][l][0] - x, 2) + Math.pow(vectorCoords[j][m][l][1] - y, 2) < Math.pow(vectorRadius, 2)  && ImageWindow.WIDTH > x && x > 0 && y > 0 && y < ImageWindow.HEIGHT){
                                          pixels[x][y].setRGB(255, 0, pixels[x][y].getB());
                                          if (i>=0){
                                              pixelDelete.add(x);
                                              pixelDelete.add(y);
                                          }

                                    }
                                }
                            }
                        }
                        if (m > 100){
                           // break;
                        }
                    }
                    image.setPixels(pixels);
                    image.update();
                    for (int l = 0; l < pixelDelete.size(); l+=2) {
                        pixels[pixelDelete.get(l)][pixelDelete.get(l+1)].setRGB(0, 0, pixels[pixelDelete.get(l)][pixelDelete.get(l+1)].getB());

                    }
               /*     for (int l = 0; l < pixelEdit.size(); l+=2) {
                        if (j%((int)k/255)==0){
                            pixels[pixelEdit.get(l)][pixelEdit.get(l+1)].setRGB(0, 0, pixels[pixelEdit.get(l)][pixelEdit.get(l+1)].getB()-1);
                        }

                    } */
                }

                for (int x = 0; x < image.WIDTH; x++) {
                    for (int y = 0; y < image.HEIGHT; y++) {
             //           pixels[x][y].setRGB(0, 0, 0);
                    }
                }

            }
        }

    }
}
